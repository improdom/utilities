import java.time.Instant;
import java.util.concurrent.atomic.AtomicLong;

public class UTCUniqueIntegerGenerator {

    private static final AtomicLong counter = new AtomicLong(0);

    public static long generateUniqueNumber() {
        // Get the current UTC time in milliseconds
        long timestamp = Instant.now().toEpochMilli();

        // Get the counter value and increment it atomically
        long uniqueCounter = counter.getAndIncrement();

        // Shift the timestamp to the left by 20 bits and add the counter value
        // The 20-bit shift allows the counter to be very large without overlapping with the timestamp
        long uniqueNumber = (timestamp << 20) | (uniqueCounter & 0xFFFFF);

        return uniqueNumber;
    }

    public static void main(String[] args) {
        // Example usage
        System.out.println(generateUniqueNumber());
        System.out.println(generateUniqueNumber());
        System.out.println(generateUniqueNumber());
        // And so on...
    }
}
