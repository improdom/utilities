using System.Text.Json; // Alternatively, you can use Newtonsoft.Json

public async Task UpdateParametersAsync(string remoteDatabaseId, string databricksInstance, string databricksSqlPath, string databricksDatabaseName)
{
    try
    {
        // Define a list of parameters
        var parameterValues = new[]
        {
            new { name = "Databricks_Instance", newValue = databricksInstance },
            new { name = "Databricks_SQL_Endpoint", newValue = databricksSqlPath },
            new { name = "Databricks_Database", newValue = databricksDatabaseName },
            new { name = "RangeStart", newValue = "1900-01-01" },
            new { name = "RangeEnd", newValue = "2030-01-01" },
            new { name = "TopN_Rows", newValue = "2147483647" }
        };

        // Serialize the object to JSON
        string jsonPayload = JsonSerializer.Serialize(new { updateDetails = parameterValues }, new JsonSerializerOptions { WriteIndented = true });

        // Send the request
        using var powerClient = GetPowerBIClient(); // Assume this gets your HTTP client
        var workspaceId = "your_workspace_id";
        var datasetId = "your_dataset_id";

        var url = $"https://api.powerbi.com/v1.0/myorg/groups/{workspaceId}/datasets/{datasetId}/parameters";

        var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
        var response = await powerClient.PostAsync(url, content);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Parameters updated successfully.");
        }
        else
        {
            Console.WriteLine($"Failed to update parameters: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error occurred: {ex.Message}");
    }
}
