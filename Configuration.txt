import java.time.Instant;
import java.util.concurrent.atomic.AtomicInteger;

public class RefactoredUniqueNumberGenerator {

    private static final AtomicInteger counter = new AtomicInteger(0);

    public static int generateRefactoredUniqueNumber() {
        // Get the current UTC time in seconds since the Unix epoch
        long timestamp = Instant.now().getEpochSecond();

        // Get the counter value and increment it atomically
        int uniqueCounter = counter.getAndIncrement();

        // Use 22 bits for the timestamp and 10 bits for the counter
        // This results in a 32-bit integer, allowing for a much larger range
        int uniqueNumber = (int) ((timestamp & 0x3FFFFF) << 10) | (uniqueCounter & 0x03FF);

        return uniqueNumber;
    }

    public static void main(String[] args) {
        // Example usage
        System.out.println(generateRefactoredUniqueNumber());
        System.out.println(generateRefactoredUniqueNumber());
        System.out.println(generateRefactoredUniqueNumber());
        // And so on...
    }
}
