public async Task ReconcileDataAsync()
{
    var powerBiData = GetPowerBiData();
    var databricksData = await GetDatabricksDataAsync();

    // Combine both datasets using a full outer join pattern.
    var allPartitionIds = powerBiData.Select(p => p.PartitionId)
                                     .Union(databricksData.Select(d => d.PartitionId))
                                     .ToList();

    var differences = allPartitionIds.Select(partitionId =>
    {
        var powerBiRecord = powerBiData.FirstOrDefault(p => p.PartitionId == partitionId);
        var databricksRecord = databricksData.FirstOrDefault(d => d.PartitionId == partitionId);

        var powerBiRowCount = powerBiRecord?.RowCount ?? 0;
        var databricksRowCount = databricksRecord?.RowCount ?? 0;
        var difference = powerBiRowCount - databricksRowCount;

        return new
        {
            PartitionId = partitionId,
            PowerBiRowCount = powerBiRowCount,
            DatabricksRowCount = databricksRowCount,
            Difference = difference
        };
    })
    .Where(result => result.Difference != 0)
    .ToList();

    if (differences.Any())
    {
        Console.WriteLine("Differences found:");
        foreach (var diff in differences)
        {
            Console.WriteLine($"Partition: {diff.PartitionId}, Power BI: {diff.PowerBiRowCount}, Databricks: {diff.DatabricksRowCount}, Difference: {diff.Difference}");
        }
    }
    else
    {
        Console.WriteLine("No differences found. Data is consistent.");
    }
}
