public class PowerBIHierarchyLoader
{
    private readonly string _connectionString;

    public PowerBIHierarchyLoader(string connectionString)
    {
        _connectionString = connectionString;
    }

    public List<BusinessHierarchyRow> LoadHierarchy()
    {
        var result = new List<BusinessHierarchyRow>();

        string daxQuery = @"
EVALUATE
SELECTCOLUMNS(
    'BusinessHierarchy',
    ""BusinessGroup"", 'BusinessHierarchy'[Business Group],
    ""BusinessUnit"", 'BusinessHierarchy'[Business Unit],
    ""BusinessArea"", 'BusinessHierarchy'[Business Area],
    ""Sector"", 'BusinessHierarchy'[Sector],
    ""Desk"", 'BusinessHierarchy'[Desk],
    ""SubDesk"", 'BusinessHierarchy'[Sub Desk],
    ""Book"", 'BusinessHierarchy'[Book]
)";

        using var connection = new AdomdConnection(_connectionString);
        connection.Open();

        using var command = new AdomdCommand(daxQuery, connection);
        using var reader = command.ExecuteReader();

        while (reader.Read())
        {
            var row = new BusinessHierarchyRow
            {
                BusinessGroup = reader["BusinessGroup"]?.ToString(),
                BusinessUnit  = reader["BusinessUnit"]?.ToString(),
                BusinessArea  = reader["BusinessArea"]?.ToString(),
                Sector        = reader["Sector"]?.ToString(),
                Desk          = reader["Desk"]?.ToString(),
                SubDesk       = reader["SubDesk"]?.ToString(),
                Book          = reader["Book"]?.ToString(),
            };

            result.Add(row);
        }

        return result;
    }
}


public class HierarchyResolverService
{
    private readonly List<BusinessHierarchyRow> _hierarchyRows;

    public HierarchyResolverService(List<BusinessHierarchyRow> hierarchyRows)
    {
        _hierarchyRows = hierarchyRows ?? throw new ArgumentNullException(nameof(hierarchyRows));
    }

    public List<string> GetSubDesksForNode(string level, string value)
    {
        if (string.IsNullOrEmpty(level) || string.IsNullOrEmpty(value))
            return new List<string>();

        IEnumerable<BusinessHierarchyRow> filtered = level switch
        {
            "Business Group" => _hierarchyRows.Where(h => h.BusinessGroup == value),
            "Business Unit"  => _hierarchyRows.Where(h => h.BusinessUnit == value),
            "Business Area"  => _hierarchyRows.Where(h => h.BusinessArea == value),
            "Sector"         => _hierarchyRows.Where(h => h.Sector == value),
            "Desk"           => _hierarchyRows.Where(h => h.Desk == value),
            "Sub-Desk"       => _hierarchyRows.Where(h => h.SubDesk == value),
            _ => Enumerable.Empty<BusinessHierarchyRow>()
        };

        return filtered
            .Select(h => h.SubDesk)
            .Where(sd => !string.IsNullOrEmpty(sd))
            .Distinct()
            .ToList();
    }
}
