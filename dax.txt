using Microsoft.AnalysisServices.Tabular;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public class PowerBiModelMappingService
{
    private readonly Server _server;
    private readonly string _databaseName;
    private Dictionary<string, TableMapping> _tableMappings;
    private DateTime _lastLoadTime;
    private readonly TimeSpan _refreshInterval = TimeSpan.FromHours(2);

    public PowerBiModelMappingService(Server server, string databaseName)
    {
        _server = server ?? throw new ArgumentNullException(nameof(server));
        _databaseName = databaseName ?? throw new ArgumentNullException(nameof(databaseName));

        LoadMappings();
    }

    private void LoadMappings()
    {
        _tableMappings = new Dictionary<string, TableMapping>();
        var database = _server.Databases.FindByName(_databaseName);

        if (database == null)
            throw new Exception($"Database {_databaseName} not found on server.");

        foreach (var table in database.Model.Tables)
        {
            var mapping = new TableMapping { TableName = table.Name };

            foreach (var column in table.Columns.OfType<DataColumn>())
            {
                if (!string.IsNullOrEmpty(column.SourceColumn))
                {
                    var columnMap = new ColumnMapping
                    {
                        SourceName = column.SourceColumn,
                        FriendlyName = column.Name,
                        PowerBIDataType = column.DataType,
                        SourceDataType = column.DataType // assume same unless known otherwise
                    };

                    mapping.ColumnsBySource[columnMap.SourceName] = columnMap;
                    mapping.ColumnsByFriendly[columnMap.FriendlyName] = columnMap;
                }
            }

            _tableMappings[table.Name] = mapping;
        }

        _lastLoadTime = DateTime.UtcNow;
        Console.WriteLine($"Mappings loaded successfully at {_lastLoadTime}.");
    }

    private void EnsureMappingsAreFresh()
    {
        if (DateTime.UtcNow - _lastLoadTime > _refreshInterval)
        {
            Console.WriteLine("Refreshing mappings due to timeout...");
            LoadMappings();
        }
    }

    public string GetFriendlyName(string tableName, string sourceColumnName)
    {
        try
        {
            EnsureMappingsAreFresh();

            if (_tableMappings.TryGetValue(tableName, out var mapping) &&
                mapping.ColumnsBySource.TryGetValue(sourceColumnName, out var column))
            {
                return column.FriendlyName;
            }

            return TryLiveFetchFriendlyName(tableName, sourceColumnName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving friendly name: {ex.Message}");
            return null;
        }
    }

    public string GetSourceColumnName(string tableName, string friendlyColumnName)
    {
        try
        {
            EnsureMappingsAreFresh();

            if (_tableMappings.TryGetValue(tableName, out var mapping) &&
                mapping.ColumnsByFriendly.TryGetValue(friendlyColumnName, out var column))
            {
                return column.SourceName;
            }

            return null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving source column name: {ex.Message}");
            return null;
        }
    }

    public (DataType? PowerBIType, DataType? SourceType)? GetColumnDataTypes(string tableName, string sourceColumnName)
    {
        try
        {
            EnsureMappingsAreFresh();

            if (_tableMappings.TryGetValue(tableName, out var mapping) &&
                mapping.ColumnsBySource.TryGetValue(sourceColumnName, out var column))
            {
                return (column.PowerBIDataType, column.SourceDataType);
            }

            return null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving column data types: {ex.Message}");
            return null;
        }
    }

    private string TryLiveFetchFriendlyName(string tableName, string sourceColumnName)
    {
        try
        {
            var database = _server.Databases.FindByName(_databaseName);
            var table = database?.Model.Tables.Find(tableName);

            if (table == null) return null;

            var column = table.Columns
                .OfType<DataColumn>()
                .FirstOrDefault(c => c.SourceColumn.Equals(sourceColumnName, StringComparison.OrdinalIgnoreCase));

            if (column != null)
            {
                if (!_tableMappings.ContainsKey(tableName))
                    _tableMappings[tableName] = new TableMapping { TableName = tableName };

                var columnMap = new ColumnMapping
                {
                    SourceName = column.SourceColumn,
                    FriendlyName = column.Name,
                    PowerBIDataType = column.DataType,
                    SourceDataType = column.DataType
                };

                _tableMappings[tableName].ColumnsBySource[columnMap.SourceName] = columnMap;
                _tableMappings[tableName].ColumnsByFriendly[columnMap.FriendlyName] = columnMap;

                return columnMap.FriendlyName;
            }

            return null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Live fetch failed: {ex.Message}");
            return null;
        }
    }

    public Dictionary<string, string> GetAllMappingsForTable(string tableName)
    {
        try
        {
            EnsureMappingsAreFresh();
            return _tableMappings.TryGetValue(tableName, out var mapping)
                ? mapping.ColumnsBySource.ToDictionary(kv => kv.Key, kv => kv.Value.FriendlyName)
                : null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving mappings for table {tableName}: {ex.Message}");
            return null;
        }
    }

    public void ForceRefresh()
    {
        Console.WriteLine("Force refreshing mappings manually...");
        LoadMappings();
    }
}

public class TableMapping
{
    public string TableName { get; set; }
    public Dictionary<string, ColumnMapping> ColumnsBySource { get; } = new();
    public Dictionary<string, ColumnMapping> ColumnsByFriendly { get; } = new();
}

public class ColumnMapping
{
    public string SourceName { get; set; }
    public string FriendlyName { get; set; }
    public DataType PowerBIDataType { get; set; }
    public DataType SourceDataType { get; set; }
}
