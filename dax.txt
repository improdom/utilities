using Microsoft.EntityFrameworkCore;

public class RetentionDbContext : DbContext
{
    public RetentionDbContext(DbContextOptions<RetentionDbContext> options)
        : base(options) { }

    public DbSet<QueryReadiness> QueryReadinesses { get; set; }
    public DbSet<ReadinessStatus> ReadinessStatuses { get; set; }
    public DbSet<QueryExecutionStatus> QueryExecutionStatuses { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        // QueryReadiness
        modelBuilder.Entity<QueryReadiness>()
            .HasKey(q => q.QueryId);

        modelBuilder.Entity<QueryReadiness>()
            .Property(q => q.CreatedAt)
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        modelBuilder.Entity<QueryReadiness>()
            .HasMany(q => q.ReadinessStatuses)
            .WithOne(r => r.Query)
            .HasForeignKey(r => r.QueryId)
            .OnDelete(DeleteBehavior.Cascade);

        modelBuilder.Entity<QueryReadiness>()
            .HasMany(q => q.ExecutionLogs)
            .WithOne(e => e.Query)
            .HasForeignKey(e => e.QueryId)
            .OnDelete(DeleteBehavior.Cascade);

        // ReadinessStatus
        modelBuilder.Entity<ReadinessStatus>()
            .HasKey(r => new { r.QueryId, r.SubDeskName, r.ExecutionDate });

        modelBuilder.Entity<ReadinessStatus>()
            .Property(r => r.LastUpdated)
            .HasDefaultValueSql("CURRENT_TIMESTAMP");

        // QueryExecutionStatus
        modelBuilder.Entity<QueryExecutionStatus>()
            .HasKey(e => new { e.QueryId, e.ExecutionDate });

        modelBuilder.Entity<QueryExecutionStatus>()
            .Property(e => e.Status)
            .HasConversion<string>();

        modelBuilder.Entity<QueryExecutionStatus>()
            .Property(e => e.LastAttempt)
            .HasDefaultValueSql("CURRENT_TIMESTAMP");
    }
}
