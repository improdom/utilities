using System;
using System.Text.Json.Serialization;

public class ReadinessResponseDto
{
    public string ProcessEventLogId { get; set; }
    public string BusinessDate { get; set; }
    public string EventName { get; set; }
    public string SourceEnvironment { get; set; }
    public string SourceEventTs { get; set; } // Consider using DateTime?
    public string DatasetName { get; set; }
    public string SourceSystem { get; set; }

    // Commented out in original Java
    // public string DataContext { get; set; }
    // public string RdmBusinessArea { get; set; }

    public string RiskSystemType { get; set; }
    public int RunVersion { get; set; }
    public string BusinessLevel { get; set; }
    public int BusinessViewModel { get; set; }
    public string BusinessViewModelName { get; set; }
    public string RunContext { get; set; }
    public string EventMessage { get; set; }

    [JsonPropertyName("updateTime")]
    [JsonConverter(typeof(JsonDateTimeConverter))] // You'll need to implement this
    public DateTime UpdateTime { get; set; }

    public string CalcCategory { get; set; }
    public string ResultType { get; set; }
    public string Region { get; set; }
    public string DataCategory { get; set; }
    public string DataSubCategory { get; set; }

    [JsonIgnore]
    public string ResourceWeightage { get; set; }

    [JsonIgnore]
    public string EventId { get; set; }
}


using System;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Globalization;

public class JsonDateTimeConverter : JsonConverter<DateTime>
{
    private const string Format = "yyyy-MM-dd'T'HH:mm:ss.fff'Z'";

    public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        return DateTime.ParseExact(reader.GetString(), Format, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal);
    }

    public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options)
    {
        writer.WriteStringValue(value.ToUniversalTime().ToString(Format));
    }
}
