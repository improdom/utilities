using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;

public class DaxInspector
{
    public static (List<string> filters, List<string> outputColumns) AnalyzeDax(string dax)
    {
        var filters = ExtractFilters(dax);
        var outputColumns = ExtractSummarizeColumns(dax);
        return (new List<string>(filters), new List<string>(outputColumns));
    }

    private static HashSet<string> ExtractFilters(string dax)
    {
        var filters = new HashSet<string>();

        // Match 'Table Name'[Column Name] = "value" or 'value' or number
        var filterRegex = new Regex(@"('[^']+'\[[^\]]+\])\s*=\s*(""[^""]+""|'[^']+'|\d+)", RegexOptions.IgnoreCase);
        foreach (Match match in filterRegex.Matches(dax))
        {
            filters.Add($"{match.Groups[1].Value} = {match.Groups[2].Value}");
        }

        return filters;
    }

    private static HashSet<string> ExtractSummarizeColumns(string dax)
    {
        var outputCols = new HashSet<string>();

        // Extract content of SUMMARIZECOLUMNS(...)
        var summarizeRegex = new Regex(@"SUMMARIZECOLUMNS\s*\((.*?)\)", RegexOptions.Singleline | RegexOptions.IgnoreCase);
        foreach (Match match in summarizeRegex.Matches(dax))
        {
            string args = match.Groups[1].Value;

            // Match 'Table Name'[Column Name]
            var columnRegex = new Regex(@"'[^']+'\[[^\]]+\]", RegexOptions.IgnoreCase);
            foreach (Match col in columnRegex.Matches(args))
            {
                outputCols.Add(col.Value);
            }
        }

        return outputCols;
    }
}
