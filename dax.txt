using Microsoft.Azure.Databricks.Client;
using Microsoft.Azure.Databricks.Client.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public class DeltaTableManager
{
    private readonly IDatabricksClient _databricksClient;
    private const int MaxRetryAttempts = 3;
    private const int RetryDelayMilliseconds = 2000;

    public DeltaTableManager(IDatabricksClient databricksClient)
    {
        _databricksClient = databricksClient;
    }

    public async Task CreateOrUpdateTableAsync(
        string databaseName,
        string tableName,
        Dictionary<string, string> columns
    )
    {
        string fullTableName = $"{databaseName}.{tableName}";

        bool tableExists = await TableExistsAsync(databaseName, tableName);

        if (!tableExists)
        {
            string createSql = GenerateCreateTableSql(databaseName, tableName, columns);
            await ExecuteSqlAsync(createSql);
        }
        else
        {
            var existingColumns = await GetTableColumnsAsync(databaseName, tableName);

            var columnsToAdd = columns.Keys.Except(existingColumns.Keys).ToList();
            var columnsToRemove = existingColumns.Keys.Except(columns.Keys).ToList();
            var columnsToUpdateType = existingColumns.Where(e => columns.ContainsKey(e.Key) && columns[e.Key] != e.Value)
                                                      .Select(e => (ColumnName: e.Key, NewType: columns[e.Key]))
                                                      .ToList();

            if (!columnsToAdd.Any() && !columnsToRemove.Any() && !columnsToUpdateType.Any())
            {
                Console.WriteLine("No changes required for the table schema.");
                return;
            }

            Console.WriteLine($"Changes detected for table {fullTableName}:");
            if (columnsToAdd.Any()) Console.WriteLine($"Columns to add: {string.Join(", ", columnsToAdd)}");
            if (columnsToRemove.Any()) Console.WriteLine($"Columns to remove: {string.Join(", ", columnsToRemove)}");
            if (columnsToUpdateType.Any()) Console.WriteLine($"Columns to update type: {string.Join(", ", columnsToUpdateType.Select(c => c.ColumnName))}");

            try
            {
                var commands = new List<string>();

                foreach (var column in columnsToAdd)
                {
                    commands.Add($"ALTER TABLE {fullTableName} ADD COLUMNS ({column} {columns[column]})");
                }

                foreach (var column in columnsToRemove)
                {
                    commands.Add($"ALTER TABLE {fullTableName} DROP COLUMN {column}");
                }

                foreach (var (columnName, newType) in columnsToUpdateType)
                {
                    string tempColumn = columnName + "_temp";

                    commands.Add($"ALTER TABLE {fullTableName} ADD COLUMNS ({tempColumn} {newType})");
                    commands.Add($"UPDATE {fullTableName} SET {tempColumn} = {columnName}");
                    commands.Add($"ALTER TABLE {fullTableName} DROP COLUMN {columnName}");
                    commands.Add($"ALTER TABLE {fullTableName} RENAME COLUMN {tempColumn} TO {columnName}");
                }

                foreach (var sql in commands)
                {
                    await ExecuteSqlAsync(sql);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error occurred during schema update: {ex.Message}");
                throw;
            }
        }
    }

    private async Task<bool> TableExistsAsync(string databaseName, string tableName)
    {
        string sql = $"SHOW TABLES IN {databaseName} LIKE '{tableName}'";
        var result = await ExecuteSqlAsync(sql);
        return result.Contains(tableName, StringComparison.OrdinalIgnoreCase);
    }

    private async Task<Dictionary<string, string>> GetTableColumnsAsync(string databaseName, string tableName)
    {
        string sql = $"DESCRIBE TABLE {databaseName}.{tableName}";
        var result = await ExecuteSqlAsync(sql);

        var columns = new Dictionary<string, string>();

        foreach (var line in result.Split('\n'))
        {
            var parts = line.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length >= 2)
            {
                columns[parts[0]] = parts[1];
            }
        }

        return columns;
    }

    private string GenerateCreateTableSql(string databaseName, string tableName, Dictionary<string, string> columns)
    {
        string columnsSql = string.Join(", ", columns.Select(c => $"{c.Key} {c.Value}"));
        return $"CREATE TABLE IF NOT EXISTS {databaseName}.{tableName} ({columnsSql}) USING DELTA";
    }

    private async Task<string> ExecuteSqlAsync(string sql)
    {
        for (int attempt = 1; attempt <= MaxRetryAttempts; attempt++)
        {
            try
            {
                var command = new Command
                {
                    Language = CommandLanguage.SQL,
                    CommandText = sql
                };

                var result = await _databricksClient.Command.Execute(command);
                return result?.Result ?? string.Empty;
            }
            catch (Exception ex) when (attempt < MaxRetryAttempts)
            {
                Console.WriteLine($"Attempt {attempt} failed: {ex.Message}. Retrying in {RetryDelayMilliseconds}ms...");
                await Task.Delay(RetryDelayMilliseconds);
            }
        }

        throw new Exception($"Failed to execute SQL after {MaxRetryAttempts} attempts: {sql}");
    }
}
