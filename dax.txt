using System;
using System.Linq;
using System.Text.RegularExpressions;
using Microsoft.AnalysisServices.AdomdClient;

namespace DaxParserLib
{
    public class DaxQueryProcessor
    {
        private readonly string _connectionString;

        public DaxQueryProcessor(string connectionString)
        {
            _connectionString = connectionString;
        }

        // Step 1: Validate that the DAX query is syntactically correct and runnable
        public bool Validate(string dax, out string error)
        {
            error = string.Empty;
            try
            {
                using var conn = new AdomdConnection(_connectionString);
                conn.Open();
                var cmd = conn.CreateCommand();
                cmd.CommandText = dax;
                cmd.ExecuteReader().Close();
                return true;
            }
            catch (Exception ex)
            {
                error = ex.Message;
                return false;
            }
        }

        // Step 2: Check if the DAX query already has a date filter
        public bool HasDateFilter(string dax, string dateColumn)
        {
            string normalizedDateColumn = Regex.Escape(dateColumn.Replace("'", "").Trim());

            string[] patterns = new[]
            {
                $@"\b{normalizedDateColumn}\b\s*=\s*DATE\s*\(",
                $@"\b{normalizedDateColumn}\b\s*=\s*TODAY\s*\(",
                $@"\b{normalizedDateColumn}\b\s*(=|<|>|<=|>=)\s*VAR\b",
                $@"\b{normalizedDateColumn}\b\s+IN\s+\{{",
                $@"\b{normalizedDateColumn}\b\s+IN\s+VALUES\(",
                $@"\bDATESBETWEEN\s*\([^\)]*\b{normalizedDateColumn}\b",
                $@"\bTOTALYTD\s*\([^\)]*\b{normalizedDateColumn}\b",
                $@"\bKEEPFILTERS\s*\([^\)]*\b{normalizedDateColumn}\b",
                $@"\bFILTER\s*\([^\)]*\b{normalizedDateColumn}\b",
                $@"\bUSERELATIONSHIP\s*\([^\)]*\b{normalizedDateColumn}\b",
                $@"\bTREATAS\s*\([^\)]*\b{normalizedDateColumn}\b"
            };

            return patterns.Any(p => Regex.IsMatch(dax, p, RegexOptions.IgnoreCase | RegexOptions.Singleline));
        }

        // Step 3: If no filter exists, wrap the query in a CALCULATETABLE with TREATAS
        public string WrapWithTreatAs(string dax, string dateColumn, DateTime filterDate)
        {
            if (HasDateFilter(dax, dateColumn))
                return dax;

            string treatasClause = $"TREATAS({{ DATE({filterDate.Year},{filterDate.Month},{filterDate.Day}) }}, '{dateColumn}')";
            string cleanedDax = dax.Trim();

            // Remove EVALUATE prefix temporarily
            if (cleanedDax.StartsWith("EVALUATE", StringComparison.OrdinalIgnoreCase))
            {
                cleanedDax = cleanedDax.Substring(8).Trim();
            }

            // Wrap with CALCULATETABLE and inject TREATAS
            return $"EVALUATE CALCULATETABLE(({cleanedDax}), {treatasClause})";
        }
    }
}
