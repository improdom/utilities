public static List<List<T>> Partition<T>(List<T> source, int numberOfPartitions)
{
    if (numberOfPartitions <= 0)
        throw new ArgumentException("Number of partitions must be greater than 0");

    var partitioned = new List<List<T>>();
    int totalItems = source.Count;

    // Ensure we have at most 'numberOfPartitions' partitions
    int minPartitionSize = totalItems / numberOfPartitions;
    int remainder = totalItems % numberOfPartitions; // Extra items to distribute

    int currentIndex = 0;
    for (int i = 0; i < numberOfPartitions; i++)
    {
        int currentPartitionSize = minPartitionSize + (i < remainder ? 1 : 0); // Distribute extra items evenly
        var chunk = source.Skip(currentIndex).Take(currentPartitionSize).ToList();
        partitioned.Add(chunk);
        currentIndex += currentPartitionSize;
    }

    return partitioned;
}
