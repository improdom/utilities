public async Task CreateUpdateQuerySpace(QuerySpace querySpace)
{
    var allColumns = querySpace.Queries
        .SelectMany(q => ExtractColumnTypes(q))
        .DistinctBy(kv => kv.Key)
        .ToList();

    var columnMap = allColumns.ToDictionary(
        kv => kv.Key,
        kv => kv.Value.GetValueOrDefault());

    await _databricksDeltaService.CreateOrUpdateTableAsync(
        databaseName: "hive_metastore.mr_arc_composite_gold_views",
        tableName: "pbi_data_retention_point",
        columns: columnMap);

    await _powerBiModelService.CreateOrUpdateTableAsync(
        querySpace.Name,
        allColumns.ToDictionary(kv => kv.Key, kv => kv.Value));
}

private IEnumerable<KeyValuePair<string, (PowerBIType, SourceType)?>> ExtractColumnTypes(PowerBIQuery query)
{
    var (filters, outputColumns, _) = DaxInspector.AnalyzeDax(query.DaxQuery);
    var columnTypes = new Dictionary<string, (PowerBIType, SourceType)?>();
    
    foreach (var attribute in outputColumns)
    {
        var parts = attribute.Split('.');
        if (parts.Length < 2) continue;

        string table = parts[0].Trim('[', ']');
        string column = parts[^1].Trim('[', ']');
        string colKey = $"{table}.{column}";

        var columnType = _powerBiModelMappingService
            .GetColumnDataTypes(table, column);

        columnTypes.TryAdd(colKey, columnType);
    }

    foreach (var measure in query.Measures.Select(m => m.Replace("[", "").Replace("]", "")))
    {
        columnTypes.TryAdd(measure, (PowerBIType.Double, SourceType.Double));
    }

    return columnTypes;
}
